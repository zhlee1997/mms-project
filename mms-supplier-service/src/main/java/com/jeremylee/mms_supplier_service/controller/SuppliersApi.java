/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.jeremylee.mms_supplier_service.controller;

import com.jeremylee.mms_supplier_service.model.Supplier;
import com.jeremylee.mms_supplier_service.model.SupplierRequest;
import com.jeremylee.mms_supplier_service.request.CreateSupplierRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-21T23:57:33.854025+08:00[Asia/Kuala_Lumpur]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Supplier", description = "the Supplier API")
public interface SuppliersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /suppliers : Create a new supplier
     *
     * @param supplierRequest (required)
     * @return Supplier created successfully (status code 201)
     */
    @Operation(operationId = "createSupplier", summary = "Create a new supplier", tags = { "Supplier" }, responses = {
            @ApiResponse(responseCode = "201", description = "Supplier created successfully", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/suppliers", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<Supplier> createSupplier(
            @Parameter(name = "SupplierRequest", description = "", required = true) @Valid @RequestBody CreateSupplierRequest supplierRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contact_name\" : \"contact_name\", \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /suppliers/{supplierId} : Delete a supplier
     *
     * @param supplierId (required)
     * @return Supplier deleted successfully (status code 204)
     *         or Supplier not found (status code 404)
     */
    @Operation(operationId = "deleteSupplier", summary = "Delete a supplier", tags = { "Supplier" }, responses = {
            @ApiResponse(responseCode = "204", description = "Supplier deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Supplier not found")
    })
    @RequestMapping(method = RequestMethod.DELETE, value = "/suppliers/{supplierId}")

    default ResponseEntity<Void> deleteSupplier(
            @Parameter(name = "supplierId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("supplierId") Long supplierId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /suppliers/{supplierId} : Retrieve a supplier by ID
     *
     * @param supplierId (required)
     * @return Supplier found (status code 200)
     *         or Supplier not found (status code 404)
     */
    @Operation(operationId = "getSupplier", summary = "Retrieve a supplier by ID", tags = { "Supplier" }, responses = {
            @ApiResponse(responseCode = "200", description = "Supplier found", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            }),
            @ApiResponse(responseCode = "404", description = "Supplier not found")
    })
    @RequestMapping(method = RequestMethod.GET, value = "/suppliers/{supplierId}", produces = { "application/json" })

    default ResponseEntity<Supplier> getSupplier(
            @Parameter(name = "supplierId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("supplierId") String supplierId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contact_name\" : \"contact_name\", \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /suppliers : List all suppliers
     *
     * @return List of suppliers (status code 200)
     */
    @Operation(operationId = "listSuppliers", summary = "List all suppliers", tags = { "Supplier" }, responses = {
            @ApiResponse(responseCode = "200", description = "List of suppliers", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Supplier.class)))
            })
    })
    @RequestMapping(method = RequestMethod.GET, value = "/suppliers", produces = { "application/json" })

    default ResponseEntity<List<Supplier>> listSuppliers(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"contact_name\" : \"contact_name\", \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"email\" : \"email\" }, { \"contact_name\" : \"contact_name\", \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /suppliers/{supplierId} : Update a supplier
     *
     * @param supplierId      (required)
     * @param supplierRequest (required)
     * @return Supplier updated successfully (status code 200)
     *         or Supplier not found (status code 404)
     */
    @Operation(operationId = "updateSupplier", summary = "Update a supplier", tags = { "Supplier" }, responses = {
            @ApiResponse(responseCode = "200", description = "Supplier updated successfully", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            }),
            @ApiResponse(responseCode = "404", description = "Supplier not found")
    })
    @RequestMapping(method = RequestMethod.PUT, value = "/suppliers/{supplierId}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<Supplier> updateSupplier(
            @Parameter(name = "supplierId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("supplierId") Long supplierId,
            @Parameter(name = "SupplierRequest", description = "", required = true) @Valid @RequestBody SupplierRequest supplierRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contact_name\" : \"contact_name\", \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
